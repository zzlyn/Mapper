#include "StreetsDatabaseAPI.h"
#include "m1.h"
#include <vector>
#include <algorithm>
#include <map>
#include <unordered_map>
#include <math.h>
#include "intersectionInfo.h"
using namespace std;
//load the map

unordered_multimap<string, unsigned> FindID; //CHANGED FROM MULTIMAP
unordered_multimap<unsigned, vector<unsigned>> findStreetFromStreet; //CHANGED FROM MULTIMAP
vector<vector<unsigned>> segofintersections;
vector<vector<unsigned>> streetidtointersections;
vector<vector<LatLon>> curvePoint;

bool load_map(std::string map_name) {

    bool load_success = loadStreetsDatabaseBIN(map_name);

    for (unsigned i = 0; i < getNumberOfStreets(); i++) {
        FindID.insert(make_pair(getStreetName(i), i));
    }

    for (unsigned i = 0; i < getNumberOfStreetSegments(); i++) {
        StreetSegmentInfo c = getStreetSegmentInfo(i);
        auto iter = findStreetFromStreet.find(c.streetID);
        if (iter == findStreetFromStreet.end()) {
            vector<unsigned> segvec;
            segvec.push_back(i);
            findStreetFromStreet.insert(make_pair(c.streetID, segvec));
        } else {
            iter->second.push_back(i);
        }
    }

    for (unsigned k = 0; k < getNumberOfIntersections(); k++) {
        vector<unsigned> realid;
        for (unsigned l = 0; l < getIntersectionStreetSegmentCount(k); l++) {
            realid.push_back(getIntersectionStreetSegment(k, l));

        }
        segofintersections.push_back(realid);
    }

    for (unsigned a = 0; a < getNumberOfStreets(); a++) {
        vector <unsigned> segids = find_street_street_segments(a);
        vector <unsigned> intersectionids;
        for (unsigned i = 0; i < segids.size(); i++) {
            StreetSegmentInfo tempseg = getStreetSegmentInfo(segids[i]);
            bool checkfrom = 1;
            bool checkto = 1;
            for (unsigned search = 0; search < intersectionids.size(); search++) {
                if (intersectionids[search] == tempseg.from)
                    checkfrom = 0;
                if (intersectionids[search] == tempseg.to)
                    checkto = 0;
            }
            if (tempseg.from == tempseg.to && (checkfrom == 1 || checkto == 1)) {
                intersectionids.push_back(tempseg.from);
                continue;
            }
            if (checkfrom == 1) {
                intersectionids.push_back(tempseg.from);
            }
            if (checkto == 1) {
                intersectionids.push_back(tempseg.to);
            }
        }
        streetidtointersections.push_back(intersectionids);
    }
    
    for(unsigned i = 0; i < getNumberOfStreetSegments(); i++){
        StreetSegmentInfo tempseg = getStreetSegmentInfo(i);        // get the street information
        vector<LatLon> points;                                      // the vector used to store the LatLon of the startpoint curvepoint and endpoint 
        points.push_back(getIntersectionPosition(tempseg.from));    // store the start point
        for(unsigned a = 0; a<tempseg.curvePointCount;a++ ){       // store all the curve points
            points.push_back(getStreetSegmentCurvePoint(i, a));
        }
        points.push_back(getIntersectionPosition(tempseg.to));      // store the end point
        curvePoint.push_back(points);                               // insert the latlon to the street segment
    }
    
    
    return load_success;
}

//close the map

void close_map() {
    closeStreetDatabase();

    // destroy/clear any data structures you created in load_map
    // ...
}

//implement the rest of the functions provided in m1.h
// ...

vector<unsigned> find_street_ids_from_name(std::string street_name) {
    vector<unsigned> street_ids;
    auto range = FindID.equal_range(street_name);
    for (auto iter = range.first; iter != range.second; iter++) {
        street_ids.push_back(iter->second);
    }
    /*for(int i=0; i< getNumberOfStreets()-1; i++){
    if(getStreetName(i)==street_name)
        street_ids.push_back(i);
    }*/

    return street_ids;
}

vector<unsigned> find_intersection_street_segments(unsigned intersection_id) {
    return segofintersections[intersection_id];

}

vector<std::string> find_intersection_street_names(unsigned intersection_id) {

    vector<unsigned> segids = find_intersection_street_segments(intersection_id);
    vector<string> stnames;

    for (unsigned a = 0; a < segids.size(); a++) {
        StreetSegmentInfo tempst;
        tempst = getStreetSegmentInfo(segids[a]);
        stnames.push_back(getStreetName(tempst.streetID));
    }

    return stnames;
}

bool are_directly_connected(unsigned intersection_id1, unsigned intersection_id2) {
    if (intersection_id1 == intersection_id2) {
        return true;
    }
    vector<unsigned> segids = find_intersection_street_segments(intersection_id1);

    for (auto iter = segids.begin(); iter != segids.end(); iter++) {
        StreetSegmentInfo a = getStreetSegmentInfo(*iter);

        if ((a.from == intersection_id1)&&(a.to == intersection_id2)) {
            return true;
        } else if ((a.from == intersection_id2)&&(a.to == intersection_id1)&&(a.oneWay == false)) {
            return true;
        }
    }
    return false;
}

vector<unsigned> find_street_street_segments(unsigned street_id) {

    return (findStreetFromStreet.find(street_id))->second;

}

vector<unsigned> find_all_street_intersections(unsigned street_id) {//ERROR


    return streetidtointersections[street_id];
}

vector<unsigned> find_adjacent_intersections(unsigned intersection_id) {
    vector<unsigned> streetSegID = find_intersection_street_segments(intersection_id);
    vector<unsigned> intersectionID;

    for (auto iter = streetSegID.begin(); iter != streetSegID.end(); iter++) {
        StreetSegmentInfo stru = getStreetSegmentInfo(*iter);
        unsigned frm = stru.from;
        unsigned two = stru.to;
        if (frm == intersection_id) {
            if (are_directly_connected(frm, two)) //check if it is one-way
                intersectionID.push_back(two);
        } else {
            if (are_directly_connected(two, frm)) //check if it is one-way
                intersectionID.push_back(frm);
        }
    }
    sort(intersectionID.begin(), intersectionID.end());
    intersectionID.erase(unique(intersectionID.begin(), intersectionID.end()), intersectionID.end());

    return intersectionID;
}

std::vector<unsigned> find_intersection_ids_from_street_names(std::string street_name1, std::string street_name2) {
    vector <unsigned> a;
    return a;
}

//find distance between two coordinates

double find_distance_between_two_points(LatLon point1, LatLon point2) {
    float lat_ave = (point1.lat + point2.lat) / 2 * DEG_TO_RAD; //get the average latitude
    float X1 = point1.lon * cos(lat_ave)* DEG_TO_RAD; //get the position of point1 in XY coodinate
    float Y1 = point1.lat* DEG_TO_RAD;
    float X2 = point2.lon * cos(lat_ave)* DEG_TO_RAD; //get the position of point2 in XY coodinate
    float Y2 = point2.lat* DEG_TO_RAD;
    float d = EARTH_RADIUS_IN_METERS * sqrt(pow(Y1 - Y2, 2) + pow(X1 - X2, 2)); //get the distance
    return d;
}

double find_street_segment_length(unsigned street_segment_id) {
    double length = 0; // the total length
    vector<LatLon> positionOfPoints = curvePoint[street_segment_id];
    for(auto iter=positionOfPoints.begin();iter!=positionOfPoints.end()-1;iter++){
        double segLength=find_distance_between_two_points(*(iter+1), *iter);
        length = length + segLength;
    }
    return length;
}

double find_street_length(unsigned street_id) {
    double length = 0;
    vector<unsigned> segID = find_street_street_segments(street_id); // all street segment ID
    for (auto iter = segID.begin(); iter != segID.end(); iter++) {
        length = length + find_street_segment_length(*iter); // add all street segment length together
    }
    return length;
}

double find_street_segment_travel_time(unsigned street_segment_id) {
    double distance = find_street_segment_length(street_segment_id)/1000; // get the total length
    float speed_limit = getStreetSegmentInfo(street_segment_id).speedLimit; // get the speed limit
    double time = distance / speed_limit * 60; // get the time in minites
    return time;
}

//find the nearest point of interest to a given position

unsigned find_closest_point_of_interest(LatLon my_position) {

    return 0;
}

//find the nearest intersection (by ID) to a given position

unsigned find_closest_intersection(LatLon my_position) {
    return 0;
}