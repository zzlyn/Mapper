/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include "m3.h"
#include "m2.h"
#include "intersectionInfo.h"
#include "OSMDatabaseAPI.h"
#include "m1.h"
#include <queue>
#include <iostream>
#include <set>
#include "m4.h"
#include <algorithm>
#include <vector>


using namespace std;

<<<<<<< .mine
struct cmp {

    bool operator()(const intersectionInfo lfs, const intersectionInfo rhs) const {

        return lfs.score > rhs.score;
    }

};

struct cmp2 {

    bool operator()(const intersectionInfo lfs, const intersectionInfo rhs) const {

        return lfs.distfrmsource > rhs.distfrmsource;
    }

};

=======
struct delivery {
    unsigned intersection;
    unsigned index;

    delivery(unsigned Intersection, unsigned Index) :
    intersection(Intersection), index(Index) {
    }

};

>>>>>>> .r57
vector<unsigned> traveling_courier(const std::vector<DeliveryInfo>& deliveries, const std::vector<unsigned>& depots) {
<<<<<<< .mine
=======
    vector<delivery> total_deliveries;
    unsigned delivery_info = UNKNOWN;
    unsigned delivery_index = UNKNOWN;
    unsigned current_index = UNKNOWN;
    double current_distance = INFINITYY;
    unsigned current_depot = UNKNOWN;
    vector<unsigned> routine;
    vector<unsigned> part_street_segments;
>>>>>>> .r57

<<<<<<< .mine
    unsigned next;

=======
>>>>>>> .r57
<<<<<<< .mine


    vector<unsigned> todeliver;
    for (unsigned count = 0; count < deliveries.size(); count++) {
        todeliver.push_back(deliveries[count].pickUp);
=======
    for (unsigned b = 0; b < deliveries.size(); b++) {
        unsigned pick_up = deliveries[b].pickUp;
        LatLon position1 = getIntersectionPosition(pick_up);
        for (unsigned a = 0; a < depots.size(); a++) {
            LatLon position2 = getIntersectionPosition(depots[a]);
            double new_distance = helper_find_distance(position1, position2);
            if (new_distance < current_distance) {
                current_depot = depots[a];
                current_distance = new_distance;
                delivery_info = pick_up;
                delivery_index = b;
                current_index = b;
            }
        }
        delivery d(pick_up, b);
        total_deliveries.push_back(d);
>>>>>>> .r57
    }
<<<<<<< .mine
=======

    routine = find_path_between_intersections(current_depot, delivery_info);
    total_deliveries.erase(total_deliveries.begin() + current_index);
    delivery a(deliveries[delivery_index].dropOff, delivery_index);
    total_deliveries.push_back(a);
>>>>>>> .r57

<<<<<<< .mine
    vector<unsigned> totalpath;
    unsigned interstart;

    next = depots[0];

    while (!todeliver.empty()) {
        interstart = next;
        //cout<<"caller next1: "<<next<<endl;

        vector <unsigned> path = findnext(interstart, todeliver, next);
        //cout<<"caller next2: "<<next<<endl;

        totalpath.insert(totalpath.end(), path.begin(), path.end());


        //clear current intersection in "next", add drop off location if its pick up
        //if its drop off delete without adding anything new
        for (unsigned a = 0; a < deliveries.size(); a++) {

            if (deliveries[a].pickUp == next) {
                for (unsigned b = 0; b < todeliver.size(); b++) {
                    if (todeliver[b] == next) {
                        todeliver.erase(todeliver.begin() + b);
                        todeliver.push_back(deliveries[a].dropOff);
                        break;
                    }
                }
            } else if (deliveries[a].dropOff == next) {
                for (unsigned b = 0; b < todeliver.size(); b++) {
                    if (todeliver[b] == next) {
                        todeliver.erase(todeliver.begin() + b);
                        break;
                    }

                }
=======
    while (total_deliveries.size() > 0) {
        unsigned pre_info = delivery_info;
        current_distance = INFINITYY;
        LatLon position1 = getIntersectionPosition(pre_info);
        //        routine.insert(routine.end(), part_street_segments.begin(), part_street_segments.end());
        //
        //        if (delivery_info == deliveries[delivery_index].pickUp) {//change the element;
        //            total_deliveries[current_index].intersection = deliveries[delivery_index].dropOff;
        //        } else {
        //            //if (delivery_info == deliveries[delivery_index].dropOff) {
        //                total_deliveries.erase(total_deliveries.begin() + current_index);
        //            //}
        //        }
        for (unsigned i = 0; i < total_deliveries.size(); i++) {
            LatLon position2 = getIntersectionPosition(total_deliveries[i].intersection);
            double new_distance = helper_find_distance(position1, position2);
            if (new_distance < current_distance) {
                current_distance = new_distance;
                delivery_info = total_deliveries[i].intersection;
                delivery_index = total_deliveries[i].index;
                current_index = i;
>>>>>>> .r57
            }
        }
        part_street_segments = find_path_between_intersections(pre_info, delivery_info);
        routine.insert(routine.end(), part_street_segments.begin(), part_street_segments.end());
        total_deliveries.erase(total_deliveries.begin() + current_index);
        if (delivery_info == deliveries[delivery_index].pickUp) {
            delivery a(deliveries[delivery_index].dropOff, delivery_index);
            total_deliveries.push_back(a);
        }


    }
    interstart = next;
    vector<unsigned> endpath = findnext(interstart, depots, next);
    if (endpath.size()==0){
        return endpath;
    }
    totalpath.insert(totalpath.end(), endpath.begin(), endpath.end());
    
    return totalpath;
}

vector<unsigned> findnext(unsigned intersect_id_start, vector<unsigned> idstore, unsigned &next) {
    vector<unsigned> toreturn;

    if (idstore.size() == 1) {
        next = idstore[0];
        return find_path_between_intersections(intersect_id_start, idstore[0]);
    }
<<<<<<< .mine

    for (unsigned n = 0; n < idstore.size(); n++) {
        if (helper_find_distance(getIntersectionPosition(intersect_id_start), getIntersectionPosition(idstore[n])) <= 300) {
            next = idstore[n];
            return find_path_between_intersections(intersect_id_start, idstore[n]);
=======

    current_distance = INFINITYY;
    LatLon position1 = getIntersectionPosition(delivery_info);
    for (unsigned i = 0; i < depots.size(); i++) {
        LatLon position2 = getIntersectionPosition(depots[i]);
        double new_distance = helper_find_distance(position1, position2);
        if (new_distance < current_distance) {
            current_distance = new_distance;
            current_depot = depots[i];
>>>>>>> .r57
        }
    }
<<<<<<< .mine

    priority_queue<intersectionInfo, vector<intersectionInfo>, cmp2> nodes;

    vector<intersectionInfo> exactidtointer;
    for (unsigned lul = 0; lul < getNumberOfIntersections(); lul++) {
        intersectionInfo temp;
        temp.distfrmsource = INFINITYY;
        temp.previd = UNKNOWN;
        temp.id = lul;
        temp.visited = false;
        exactidtointer.push_back(temp);
    }

    exactidtointer[intersect_id_start].distfrmsource = 0;

    nodes.push(exactidtointer[intersect_id_start]);
=======
    part_street_segments = find_path_between_intersections(current_depot, delivery_info);
    routine.insert(routine.end(), part_street_segments.begin(), part_street_segments.end());
>>>>>>> .r57
    while (nodes.size() != 0) {

<<<<<<< .mine

        intersectionInfo curr = nodes.top();
        nodes.pop();
        if (curr.distfrmsource != exactidtointer[curr.id].distfrmsource) {
            continue;
        }
        if (curr.visited == true) {
            continue;
        }
        for (unsigned b = 0; b < idstore.size(); b++) {
            if (curr.id == idstore[b]) {
                //cout<<"currid: "<<curr.id<<endl<<"idstore[b]: "<<idstore[b]<<endl;
                vector <unsigned> cmpsegments;
                while (curr.previd != UNKNOWN) {
                    cmpsegments.push_back(curr.previd);
                    curr = exactidtointer[theothernodeid(curr.id, curr.previd)];
                }
                reverse(cmpsegments.begin(), cmpsegments.end());
                
                next = idstore[b];
                //cout<<next<<endl;
                return cmpsegments;
            }
        }
        for (unsigned k = 0; k < getIntersectionStreetSegmentCount(curr.id); k++) {
            unsigned idk = getIntersectionStreetSegment(curr.id, k);
            unsigned othernode = theothernodeid(curr.id, idk);
            StreetSegmentInfo temp = getStreetSegmentInfo(idk);
            if (!((temp.from == curr.id) || (temp.to == curr.id && temp.oneWay == false))) {
                continue;
            }


            if (exactidtointer[othernode].visited == true) {
                continue;
            }

            double newtime = exactidtointer[curr.id].distfrmsource + find_street_segment_travel_time(idk);



            if ((curr.previd != UNKNOWN) && (getStreetSegmentInfo(curr.previd).streetID != temp.streetID)) {
                newtime = newtime + 0.25;
            }



            if (newtime < exactidtointer[othernode].distfrmsource) {
                exactidtointer[othernode].distfrmsource = newtime;
                exactidtointer[othernode].previd = idk;
                nodes.push(exactidtointer[othernode]);
            }


        }
        exactidtointer[curr.id].visited = true;
    }
    return toreturn;
}=======
}
>>>>>>> .r57
