#include "m2.h"
#include "OSMDatabaseAPI.h"
#include "m1.h"
#include "m3.h"
#include <vector>
#include <algorithm>
#include <math.h>
#include <istream>
#include <iostream>
#define ZOOM_FACTOR  1.6667

//cosine average latitude, convenient for later calculations
float cosavelat;
using namespace std;
const t_bound_box initial_coords;
float maxh;
float maxw;
bool draw_first_click = false;
bool draw_second_click = false;
bool draw_intersection_first = false;
bool draw_intersection_second = false;
unsigned inter1;
unsigned inter2;
LatLon clickposition1;
LatLon clickposition2;

unsigned first_intersection;
unsigned second_intersection;

//Draws the map

void draw_map() {
    float inilat = -180;
    float inilon = -180;
    float inimlat = 180;
    float inimlon = 180;
    for (unsigned i = 0; i < getNumberOfIntersections(); i++) {
        if (getIntersectionPosition(i).lat > inilat) {
            inilat = getIntersectionPosition(i).lat;
        }
        if (getIntersectionPosition(i).lon > inilon) {
            inilon = getIntersectionPosition(i).lon;
        }
        if (getIntersectionPosition(i).lat < inimlat) {
            inimlat = getIntersectionPosition(i).lat;
        }
        if (getIntersectionPosition(i).lon < inimlon) {
            inimlon = getIntersectionPosition(i).lon;
        }
    }

    init_graphics("My GIS", t_color(0XE9, 0XE4, 0XDE));
    create_button("Window", "Search", search);
    create_button("Window", "Find_a_way", find_a_way);
    float averageLat = (inimlat + inilat) / 2 * DEG_TO_RAD;
    cosavelat = cos(averageLat);
    t_point bottomleft(inimlon * DEG_TO_RAD * cosavelat, inimlat * DEG_TO_RAD);
    maxh = inilat * DEG_TO_RAD - inimlat * DEG_TO_RAD;
    maxw = inilon * DEG_TO_RAD * cosavelat - inimlon * DEG_TO_RAD * cosavelat;
    t_bound_box initial_coords = t_bound_box(bottomleft, maxw, maxh);

    set_visible_world(initial_coords);
    drawscreen();
    event_loop(act, NULL, NULL, drawscreen);


    close_graphics();

}

//Function to detect search button pressed then perform searh on POIs or streets

void find_a_way(void (*drawscreen_ptr) (void)) {
    while (1) {
        cout << "Enter the first street (or enter 'exit' to exit): ";
        string street_name1;
        getline(cin, street_name1);
        if (street_name1 == "exit") {
            return;
        }
        cout << "Enter the second street (or enter 'exit' to exit): ";
        string street_name2;
        getline(cin, street_name2);
        if (street_name2 == "exit") {
            return;
        }
        vector<unsigned> intersections = find_intersection_ids_from_street_names(street_name1, street_name2);
        if (intersections.size() == 0) {
            cout << "There are no intersections between these two streets" << endl;
            continue;
        }
        cout << " What is your destination? (intersection/POI) ";
        string destination;
        getline(cin, destination);
        while (destination == "intersection") {
            string street_name3;
            cout << "Enter the third street (or enter 'exit' to exit): ";
            getline(cin, street_name3);
            if (street_name3 == "exit") {
                return;
            }
            string street_name4;
            cout << "Enter the fourth street (or enter 'exit' to exit): ";
            getline(cin, street_name4);
            if (street_name4 == "exit") {
                return;
            }
            vector<unsigned> destination_intersections = find_intersection_ids_from_street_names(street_name3, street_name4);
            if (destination_intersections.size() == 0) {
                cout << "There are no intersections between these two streets" << endl;
                continue;
            }
            first_intersection = intersections[0];
            second_intersection = destination_intersections[0];
            clickposition1 = getIntersectionPosition(first_intersection);
            clickposition2 = getIntersectionPosition(second_intersection);
            draw_intersection_first = true;
            draw_intersection_second = true;
            drawscreen();
            return;
        }
        while (destination == "POI") {
            cout << "Enter the POI name (or enter 'exit' to exit): ";
            string POIName;
            getline(cin, POIName);
            vector<unsigned> path = find_path_to_point_of_interest(intersections[0], POIName);
            if (path.size() == 0) {
                cout << "Can't not find the POI" << endl;
                cout << "Would you like to try again ? (y/n)" << endl;
                string answer;
                getline(cin, answer);
                if (answer == "y" || answer == "Y")
                    continue;
                if (answer == "n" || answer == "N")
                    break;
            }
            second_intersection = intersections[0];
            first_intersection = intersections[0];
            clickposition1 = getIntersectionPosition(first_intersection);
            for (unsigned i = 0; i < path.size() - 1; i++) {
                second_intersection = theothernodeid(second_intersection, path[i]);
            }
            clickposition2 = getIntersectionPosition(second_intersection);
            draw_intersection_first = true;
            draw_intersection_second = true;
            drawscreen();
            return;
        }
    }
}

void search(void (*drawscreen_ptr) (void)) {
    while (1) {
        cout << "What do you want to search for?(street/POI/feature) ";
        string type;
        getline(cin, type);
        if (type == "POI") {
            cout << "Enter the name of POI: ";
            string name;
            getline(cin, name);
            for (unsigned a = 0; a < getNumberOfPointsOfInterest(); a++) {//traverse all the number of interest 
                if (name == getPointOfInterestName(a)) {//find the matching name
                    cout << "Found It!!!" << endl;
                    LatLon temp = getPointOfInterestPosition(a); //get the latitude and longitude of of the interest position
                    float tempx = temp.lon * DEG_TO_RAD*cosavelat; //change the longitude to x
                    float tempy = temp.lat*DEG_TO_RAD; //change the latitude to y
                    zoom_fit(drawscreen); //set the degree of zoom
                    for (int count = 0; count < 11; count++) {
                        handle_zoom_in(tempx, tempy, drawscreen); //zoom in to the position of 
                    }

                    drawscreen();
                    return;
                }
            }
            cout << "CANT FIND POI!!!!!" << endl;
            return;
        } else if (type == "street") {
            cout << "Enter the name of street: ";
            string name;
            getline(cin, name);
            for (unsigned a = 0; a < getNumberOfStreets(); a++) {
                if (name == getStreetName(a)) {
                    cout << "Found It!!!" << endl;
                    vector<unsigned> streetID = find_street_ids_from_name(name);
                    float x = findCenterPoint(streetID[0]).lon * DEG_TO_RAD*cosavelat;
                    float y = findCenterPoint(streetID[0]).lat * DEG_TO_RAD;
                    zoom_fit(drawscreen);
                    for (int count = 0; count < 7; count++) {
                        handle_zoom_in(x, y, drawscreen);
                    }
                    drawscreen();
                    return;
                }
            }
            cout << "CANT FIND STREET!!!!!" << endl;
            return;
        } else if (type == "feature") {
            cout << "Enter the name of feature: ";
            string name;
            getline(cin, name);
            if (name != "<noname>") {
                for (unsigned a = 0; a < getNumberOfFeatures(); a++) {
                    if (name == getFeatureName(a)) {
                        cout << "Found It!!!" << endl;
                        float xav = 0;
                        float yav = 0;
                        for (unsigned count = 0; count < getFeaturePointCount(a); count++) {
                            xav = xav + getFeaturePoint(a, count).lon;
                            yav = yav + getFeaturePoint(a, count).lat;
                        }
                        xav = xav / getFeaturePointCount(a) * cosavelat*DEG_TO_RAD;
                        yav = yav / getFeaturePointCount(a) * DEG_TO_RAD;
                        zoom_fit(drawscreen);
                        for (int zm = 0; zm < 7; zm++) {
                            handle_zoom_in(xav, yav, drawscreen);
                        }
                        drawscreen();
                        return;
                    }

                }
            }
            cout << "CANT FIND FEATURE!!!!!" << endl;
            return;
        } else {
            cout << "ENTER VALID TYPE PLEASE!!!" << endl;
        }
    }
}

//Function to highlight a certain intersection/POI when user clicks on it

void act(float x, float y, t_event_buttonPressed event) {
    if (event.button == 1) {
        drawscreen();
        setlinewidth(3);
        if (draw_first_click == false) {

            clickposition1.lat = y / DEG_TO_RAD;
            clickposition1.lon = x / DEG_TO_RAD / cosavelat;
            inter1 = find_closest_intersection(clickposition1);
            float interdis = helper_find_distance(getIntersectionPosition(inter1), clickposition1);
            unsigned poi = find_closest_point_of_interest(clickposition1);
            float poidis = helper_find_distance(getPointOfInterestPosition(poi), clickposition1);
            float diff = get_visible_world().get_height() / 80;

            if ((interdis < poidis) && interdis <= diff * EARTH_RADIUS_IN_METERS) {
                setcolor(MAGENTA);
                drawarc(x, y, diff, 0, 360);
                drawline(x - 2 * diff, y, x + 2 * diff, y);
                drawline(x, y + 2 * diff, x, y - 2 * diff);
                cout << "***********************************" << endl << "Intersection(1) Info: " << endl << "    ID: " << inter1 << endl << "  Streets: ";
                for (unsigned count = 0; count < getIntersectionStreetSegmentCount(inter1) - 1; count++) {
                    StreetSegmentInfo tempstreet = getStreetSegmentInfo(getIntersectionStreetSegment(inter1, count));
                    cout << getStreetName(tempstreet.streetID) << " & ";
                }
                StreetSegmentInfo tempstreet = getStreetSegmentInfo(getIntersectionStreetSegment(inter1, getIntersectionStreetSegmentCount(inter1) - 1));
                cout << getStreetName(tempstreet.streetID) << endl;
                cout << "***********************************" << endl << endl;
                draw_first_click = true;

            } else if ((interdis > poidis) && poidis <= diff * EARTH_RADIUS_IN_METERS) {
                cout << "***********************************" << endl << "Point of Interest(1) Info: " << endl << "    ID: " << poi << endl << "    Name: ";
                cout << getPointOfInterestName(poi) << endl;
                cout << "    Type: " << getPointOfInterestType(poi) << endl;
                cout << "***********************************" << endl << endl;
                draw_first_click = true;
            }

            return;
        }
        if (draw_first_click == true && draw_second_click == false) {
            clickposition2.lat = y / DEG_TO_RAD;
            clickposition2.lon = x / DEG_TO_RAD / cosavelat;
            inter2 = find_closest_intersection(clickposition2);
            float interdis = helper_find_distance(getIntersectionPosition(inter2), clickposition2);
            unsigned poi = find_closest_point_of_interest(clickposition2);
            float poidis = helper_find_distance(getPointOfInterestPosition(poi), clickposition2);
            float diff = get_visible_world().get_height() / 80;

            if ((interdis < poidis) && interdis <= diff * EARTH_RADIUS_IN_METERS) {
                draw_positions(clickposition1);
                setcolor(MAGENTA);
                drawarc(x, y, diff, 0, 360);
                drawline(x - 2 * diff, y, x + 2 * diff, y);
                drawline(x, y + 2 * diff, x, y - 2 * diff);
                cout << "***********************************" << endl << "Intersection(2) Info: " << endl << "    ID: " << inter2 << endl << "  Streets: ";
                for (unsigned count = 0; count < getIntersectionStreetSegmentCount(inter2) - 1; count++) {
                    StreetSegmentInfo tempstreet = getStreetSegmentInfo(getIntersectionStreetSegment(inter2, count));
                    cout << getStreetName(tempstreet.streetID) << " & ";
                }
                StreetSegmentInfo tempstreet = getStreetSegmentInfo(getIntersectionStreetSegment(inter2, getIntersectionStreetSegmentCount(inter2) - 1));
                cout << getStreetName(tempstreet.streetID) << endl;
                cout << "***********************************" << endl << endl;
                draw_second_click = true;
            } else if ((interdis > poidis) && poidis <= diff * EARTH_RADIUS_IN_METERS) {
                cout << "***********************************" << endl << "Point of Interest(2) Info: " << endl << "    ID: " << poi << endl << "    Name: ";
                cout << getPointOfInterestName(poi) << endl;
                cout << "    Type: " << getPointOfInterestType(poi) << endl;
                cout << "***********************************" << endl << endl;
                draw_second_click = true;

            }

        }
        if (draw_first_click == true && draw_second_click == true) {
            vector<unsigned> apple = find_path_between_intersections(inter1, inter2);
            highlightsegments(apple);
        }
    }
    if (event.button == 3) {
        draw_first_click = false;
        draw_second_click = false;
        draw_intersection_first = false;
        draw_intersection_second = false;
        drawscreen();
    }
    return;
    // Redraw screen to show the new line.  Could do incrementally, but this is easier.
}

//Draws the screen, continuously triggered in draw_map()

void drawscreen(void) {
    set_draw_mode(DRAW_NORMAL); // Should set this if your program does any XOR drawing in callbacks.
    clearscreen(); /* Should precede drawing for all drawscreens */
    setfontsize(10);
    setlinestyle(SOLID);
    setlinewidth(1);
    setcolor(BLACK);
    drawfeatures_lake_shoreline();
    drawfeatures_island();
    drawfeatures_park_beach_golfcourse();
    drawfeatures_greenspace();
    drawfeatures_river_stream();
    drawsegments();
    drawfeatures_building();
    if (draw_first_click == true) {
        draw_positions(clickposition1);
    }
    if (draw_second_click == true) {
        draw_positions(clickposition2);
    }
    if (draw_intersection_first == true && draw_intersection_second == true) {
        draw_positions(clickposition1);
        draw_positions(clickposition2);
    }
    //cout << get_visible_world().get_height() << " " << maxh << endl;
    if (get_visible_world().get_height() <= maxh / 10) {
        showPOI();
    }
    drawcompass();
<<<<<<< .mine
    vector<unsigned> apple=find_path_to_point_of_interest(44189, "Subway");;
    highlightsegments(apple);
=======
    if (draw_first_click == true && draw_second_click == true) {
        vector<unsigned> apple = find_path_between_intersections(inter1, inter2);
        highlightsegments(apple);
    }
    if (draw_intersection_first == true && draw_intersection_second == true) {
        vector<unsigned> apple = find_path_between_intersections(first_intersection, second_intersection);
        highlightsegments(apple);
    }
>>>>>>> .r48
}

//Draws street lines, street names and indications of oneway

void drawsegments() {
    float ratio = maxh / get_visible_world().get_height();
    //ratio=log(ratio+1.71828)/log(2.71828);
    ratio = pow(ratio, 0.66);
    //draw street segment lines
    for (unsigned a = 0; a < getNumberOfStreets(); a++) {
        vector<unsigned> temp = find_street_street_segments(a);
        float length = find_street_length(a);
        if (ratio <= 2 && (length <= 2500 || getStreetName(a) == "<unknown>")) {

            continue;
        }
        if (ratio <= 2.5 && (length <= 1700 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 3 && (length <= 1000 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 4 && (length <= 600 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 5 && (length <= 400 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        unsigned size = temp.size();
        for (unsigned b = 0; b < size; b++) {
            setcolor(WHITE);
            unsigned i = temp[b];
            StreetSegmentInfo an = getStreetSegmentInfo(i);
            //            if (ratio<=2 &&  getTagPair(getWayByIndex(an.wayOSMID),1).second!="trunk"){
            //                continue;
            //            }
            float radius;
            float spdlmt = an.speedLimit;
            if (spdlmt == 50) {//alternatively: spdlmt<=60/70/80
                setlinewidth(1 * ratio);
                radius = ratio / 2;
            } else {
                radius = spdlmt / 100 * 2.5 * ratio;
                setlinewidth(2 * radius);
            }
            if (getStreetName(an.streetID) == "<unknown>") {
                setlinewidth(1);
            }
            if (spdlmt == 100 && length >= 2000 && getStreetName(a) != "<unknown>") {
                setcolor(ORANGE);
            }
            if (spdlmt > 70 && spdlmt < 100 && getStreetName(a) != "<unknown>") {
                setcolor(LIGHTGREY);
            }
            float y1 = getIntersectionPosition(an.from).lat* DEG_TO_RAD;
            float y2 = getIntersectionPosition(an.to).lat* DEG_TO_RAD;
            float x1 = getIntersectionPosition(an.from).lon * DEG_TO_RAD * cosavelat;
            float x2 = getIntersectionPosition(an.to).lon * DEG_TO_RAD * cosavelat;

            float currx = x1;
            float curry = y1;
            for (unsigned k = 0; k < getStreetSegmentInfo(i).curvePointCount; k++) {
                drawline(currx, curry, getStreetSegmentCurvePoint(i, k).lon * DEG_TO_RAD*cosavelat, getStreetSegmentCurvePoint(i, k).lat * DEG_TO_RAD);
                currx = getStreetSegmentCurvePoint(i, k).lon * DEG_TO_RAD*cosavelat;
                curry = getStreetSegmentCurvePoint(i, k).lat*DEG_TO_RAD;
                //                if (ratio >= 15) {
                //                    fillarc(currx, curry, get_visible_world().get_height() / 100, 0, 360); //need to convert linewidth to usable length
                //                }
            }
            drawline(currx, curry, x2, y2);
            if (ratio < 10) {
                continue;
            }
            StreetSegmentInfo info = getStreetSegmentInfo(temp[b]);
            if (ratio <= 23 && getStreetName(info.streetID) == "<unknown>") {
                continue;
            }
            if (info.oneWay == true) {
                if (info.curvePointCount == 0) {
                    LatLon point1 = getIntersectionPosition(info.from);
                    LatLon point2 = getIntersectionPosition(info.to);
                    float theta = atan((point1.lat - point2.lat) / ((point1.lon - point2.lon) * cosavelat));
                    settextrotation(theta / DEG_TO_RAD);
                    setcolor(BLACK);
                    float ratio = maxh / get_visible_world().get_height();
                    ratio = 40 / (ratio + 10) + 6;
                    ratio = 0.02 * pow(ratio - 8, 2) + 9;
                    float x = (point1.lon + point2. lon) / 2 * DEG_TO_RAD*cosavelat;
                    float y = (point1.lat + point2.lat) / 2 * DEG_TO_RAD;
                    setfontsize(ratio);
                    drawtext(x, y, "→", 1000, 1000);
                    settextrotation(0);
                } else {
                    LatLon point1 = getIntersectionPosition(info.from);
                    LatLon point2 = getStreetSegmentCurvePoint(temp[b], 0);
                    float theta = atan((point1.lat - point2.lat) / ((point1.lon - point2.lon) * cosavelat));
                    settextrotation(theta / DEG_TO_RAD);
                    setcolor(BLACK);
                    float ratio = maxh / get_visible_world().get_height();
                    ratio = 40 / (ratio + 10) + 6;
                    ratio = 0.02 * pow(ratio - 8, 2) + 9;
                    float x = (point1.lon + point2. lon) / 2 * DEG_TO_RAD*cosavelat;
                    float y = (point1.lat + point2.lat) / 2 * DEG_TO_RAD;
                    setfontsize(ratio);
                    drawtext(x, y, "→", 1000, 1000);
                    settextrotation(0);
                }
            }


        }

    }
    for (unsigned a = 0; a < getNumberOfStreets(); a++) {
        float length = find_street_length(a);
        vector<unsigned> temp = find_street_street_segments(a);
        unsigned long long totalCurvePoints = 0;
        for (unsigned b = 0; b < temp.size(); b++) {
            totalCurvePoints = getStreetSegmentInfo(temp[b]).curvePointCount + totalCurvePoints;
        }
        if (ratio <= 3 && (length <= 22000 || totalCurvePoints < 250 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 4 && (length <= 13000 || totalCurvePoints < 10 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 5 && (length <= 7000 || totalCurvePoints < 10 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 6 && (length <= 4000 || totalCurvePoints < 5 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 7 && (length <= 1500 || totalCurvePoints < 5 || getStreetName(a) == "<unknown>")) {
            continue;
        }
        if (ratio <= 8 && length <= 400) {
            continue;
        }
        drawStreetName(a);
        setlinewidth(1);
    }
}

//Draw features part, features are separated into different functions to show
//different layers

void drawfeatures_park_beach_golfcourse() {
    for (unsigned i = 0; i < getNumberOfFeatures(); i++) {
        switch (getFeatureType(i)) {
                //Blue for lakes
            case Park:
            {
                if (get_visible_world().get_height() / maxh >= 0.2) {
                    continue;
                }
                setcolor(t_color(0XA6, 0XD6, 0X5C));
                drawafeature(i);
                continue;
            }
            case Beach:
            {
                setcolor(t_color(0XFF, 0XF2, 0XAB));
                drawafeature(i);
                continue;
            }

            case Golfcourse:
            {
                setcolor(t_color(0X00, 0XA6, 0X53));
                drawafeature(i);
                continue;
            }
        }
    }
}

void drawfeatures_greenspace() {
    for (unsigned i = 0; i < getNumberOfFeatures(); i++) {
        switch (getFeatureType(i)) {
                //Green for green spaces
            case Greenspace:
            {
                setcolor(t_color(0XCB, 0XDF, 0XAC));
                drawafeature(i);
                continue;
            }
        }
    }
}

void drawfeatures_building() {
    for (unsigned i = 0; i < getNumberOfFeatures(); i++) {
        switch (getFeatureType(i)) {
            case Building:
            {
                if (get_visible_world().get_height() / maxh >= 0.15) {
                    continue;
                }
                setcolor(t_color(0XF4, 0XF3, 0XEE));
                drawafeature(i);
                continue;
            }
        }
    }
}

void drawfeatures_lake_shoreline() {
    for (unsigned i = 0; i < getNumberOfFeatures(); i++) {
        switch (getFeatureType(i)) {
                //Blue for lakes
            case Lake:
            {
                setcolor(t_color(0XB7, 0XDA, 0XFF));
                drawafeature(i);
                continue;
            }

                //Green for green spaces
            case Shoreline:
            {
                setcolor(t_color(0XC7, 0XE2, 0XFF));
                drawafeature(i);
                continue;
            }
        }
    }
}

void drawfeatures_island() {
    for (unsigned i = 0; i < getNumberOfFeatures(); i++) {
        switch (getFeatureType(i)) {
            case Island:
            {
                setcolor(t_color(0XE9, 0XE4, 0XDE));
                drawafeature(i);
                continue;
            }
        }
    }
}

void drawfeatures_river_stream() {
    for (unsigned i = 0; i < getNumberOfFeatures(); i++) {
        switch (getFeatureType(i)) {
                //Blue for lakes
            case River:
            {
                setcolor(t_color(0X66, 0XB0, 0XFF));
                drawafeature(i);
                continue;
            }

                //Green for green spaces
            case Stream:
            {
                if (get_visible_world().get_height() / maxh >= 0.7) {
                    continue;
                }
                setcolor(t_color(0X91, 0XC7, 0XFF));
                float inix = getFeaturePoint(i, 0).lon * cosavelat * DEG_TO_RAD;
                float iniy = getFeaturePoint(i, 0).lat*DEG_TO_RAD;
                for (unsigned k = 1; k < getFeaturePointCount(i); k++) {
                    drawline(inix, iniy, getFeaturePoint(i, k).lon * cosavelat * DEG_TO_RAD, getFeaturePoint(i, k).lat * DEG_TO_RAD);
                    inix = getFeaturePoint(i, k).lon * cosavelat * DEG_TO_RAD;
                    iniy = getFeaturePoint(i, k).lat*DEG_TO_RAD;
                }
                continue;
            }
        }
    }
}

//General draw feature function that takes in the id of feature then determine
//if its closed/open. Draws it accordingly

void drawafeature(unsigned i) {
    t_point tparrlk[getFeaturePointCount(i)];
    if ((tparrlk[0].x == tparrlk[getFeaturePointCount(i) - 1].x)&&(tparrlk[0].y == tparrlk[getFeaturePointCount(i) - 1].y)) {
        for (unsigned k = 0; k < getFeaturePointCount(i); k++) {
            tparrlk[k].x = getFeaturePoint(i, k).lon * cosavelat * DEG_TO_RAD;
            tparrlk[k].y = getFeaturePoint(i, k).lat*DEG_TO_RAD;
        }

        fillpoly(tparrlk, getFeaturePointCount(i));
    } else {
        float inix = getFeaturePoint(i, 0).lon * cosavelat * DEG_TO_RAD;
        float iniy = getFeaturePoint(i, 0).lat*DEG_TO_RAD;
        for (unsigned k = 1; k < getFeaturePointCount(i); k++) {
            drawline(inix, iniy, getFeaturePoint(i, k).lon * cosavelat * DEG_TO_RAD, getFeaturePoint(i, k).lat * DEG_TO_RAD);
            inix = getFeaturePoint(i, k).lon * cosavelat * DEG_TO_RAD;
            iniy = getFeaturePoint(i, k).lat*DEG_TO_RAD;
        }
    }
}

//Draws all POIs as yellow dots and show their names

void showPOI() {
    float ratio = maxh / get_visible_world().get_height();
    float ratio1 = pow(ratio, 0.4);
    float ratio2 = pow(ratio + 200, 0.4);
    setfontsize(ratio2);
    //cout<<ratio<<endl;
    for (unsigned k = 0; k < getNumberOfPointsOfInterest(); k++) {
        if (ratio1 <= 5 && ((getPointOfInterestType(k) != "bus_station")&&(getPointOfInterestType(k) != "public_building")&&(getPointOfInterestType(k) != "bank")&&(getPointOfInterestType(k) != "hospital"))) {
            continue;
        }
        if (ratio1 <= 7 && ((getPointOfInterestType(k) != "bus_station")&&(getPointOfInterestType(k) != "public_building")&&(getPointOfInterestType(k) != "bank")&&(getPointOfInterestType(k) != "hospital"))&&((getPointOfInterestType(k) != "fast_food")&&(getPointOfInterestType(k) != "cafe")&&(getPointOfInterestType(k) != "restaurant"))) {
            continue;
        }
        float x = getPointOfInterestPosition(k).lon * DEG_TO_RAD*cosavelat;
        float y = getPointOfInterestPosition(k).lat*DEG_TO_RAD;
        float diff = get_visible_world().get_height() / 120;
        setcolor(YELLOW);
        fillarc(x, y, diff, 0, 360);
        setcolor(BLACK);
        drawtext(x, y, getPointOfInterestName(k), 1000, 1000);
        //cout<<getPointOfInterestType(k)<<endl;
    }
}

//finds the center position of a street

LatLon findCenterPoint(unsigned streetID) {
    vector<unsigned> streetSegID = find_street_street_segments(streetID);
    LatLon point1;
    LatLon point2;
    double length = 0;
    for (unsigned b = 0; b < streetSegID.size(); b++) {
        StreetSegmentInfo info = getStreetSegmentInfo(streetSegID[b]);
        double distance = 0;
        vector<LatLon> positionOfPoints;
        positionOfPoints.push_back(getIntersectionPosition(info.from));
        for (unsigned c = 0; c < info.curvePointCount; c++) {
            positionOfPoints.push_back(getStreetSegmentCurvePoint(streetSegID[b], c));
        }
        positionOfPoints.push_back(getIntersectionPosition(info.to));
        for (unsigned c = 0; c < positionOfPoints.size() - 1; c++) {
            distance = find_distance_between_two_points(positionOfPoints[c], positionOfPoints[c + 1]); //calculate the segment length
            if (distance > length) {
                length = distance;
                point1 = positionOfPoints[c];
                point2 = positionOfPoints[c + 1];
            }
        }

    }
    LatLon returnValue;
    returnValue.lat = (point1.lat + point2.lat) / 2;
    returnValue.lon = (point1.lon + point2.lon) / 2;
    return returnValue;
}

//Draws name on a street given its id

void drawStreetName(unsigned streetID) {
    setcolor(BLACK);

    vector<unsigned> streetSegID = find_street_street_segments(streetID);
    LatLon point1;
    LatLon point2;
    double length = 0;
    for (unsigned b = 0; b < streetSegID.size(); b++) {
        StreetSegmentInfo info = getStreetSegmentInfo(streetSegID[b]);
        double distance = 0;
        vector<LatLon> positionOfPoints;
        positionOfPoints.push_back(getIntersectionPosition(info.from));
        for (unsigned c = 0; c < info.curvePointCount; c++) {
            positionOfPoints.push_back(getStreetSegmentCurvePoint(streetSegID[b], c));
        }
        positionOfPoints.push_back(getIntersectionPosition(info.to));
        for (unsigned c = 0; c < positionOfPoints.size() - 1; c++) {
            distance = find_distance_between_two_points(positionOfPoints[c], positionOfPoints[c + 1]); //calculate the segment length
            if (distance > length) {
                length = distance;
                point1 = positionOfPoints[c];
                point2 = positionOfPoints[c + 1];
            }
        }

    }
    float x = (point1.lon + point2. lon) / 2 * DEG_TO_RAD*cosavelat;
    float y = (point1.lat + point2.lat) / 2 * DEG_TO_RAD;
    float theta = atan((point1.lat - point2.lat) / ((point1.lon - point2.lon) * cosavelat));
    settextrotation(theta / DEG_TO_RAD);
    setcolor(BLACK);
    float ratio = maxh / get_visible_world().get_height();
    ratio = 40 / (ratio + 10) + 6;
    ratio = 0.02 * pow(ratio - 8, 2) + 9;
    setfontsize(ratio);
    drawtext(x, y, getStreetName(streetID), 1000, 1000);
    settextrotation(0);
}

//Draws the compass on screen. Called at the end of drawscreen()

void drawcompass() {
    setcolor(BLACK);
    setlinewidth(5);
    float radius = get_visible_world().get_width() / 40;
    float xt = get_visible_world().bottom_left().x + get_visible_world().get_width() / 8;
    float yt = get_visible_world().bottom_left().y + get_visible_world().get_height() / 8;
    drawarc(xt, yt, radius, 0, 360);
    fillarc(xt, yt, radius / 5, 0, 360);
    setfontsize(50);
    drawtext(xt - radius, yt, "←", 1000, 1000);
    drawtext(xt + radius, yt, "→", 1000, 1000);
    drawtext(xt, yt + radius, "↑", 1000, 1000);
    drawtext(xt, yt - radius, "↓", 1000, 1000);
    setfontsize(25);
    drawtext(xt - radius * 2.5, yt, "W", 1000, 1000);
    drawtext(xt + radius * 2.5, yt, "E", 1000, 1000);
    drawtext(xt, yt + radius * 2.5, "N", 1000, 1000);
    drawtext(xt, yt - radius * 2.5, "S", 1000, 1000);
}

void highlightsegments(vector<unsigned> segids) {
    setlinewidth(3);
    setcolor(RED);
    setfontsize(30);
    unsigned preIntersectionID = inter1;
    vector<unsigned> street_segment_id;
    for (unsigned k = 0; k < segids.size(); k++) {
        unsigned curIntersectionID = theothernodeid(preIntersectionID, segids[k]);
        if (street_segment_id.size() == 0) {
            street_segment_id.push_back(segids[k]);
        }
        StreetSegmentInfo an = getStreetSegmentInfo(segids[k]);
        double y1 = getIntersectionPosition(an.from).lat* DEG_TO_RAD;
        double y2 = getIntersectionPosition(an.to).lat* DEG_TO_RAD;
        double x1 = getIntersectionPosition(an.from).lon * DEG_TO_RAD * cosavelat;
        double x2 = getIntersectionPosition(an.to).lon * DEG_TO_RAD * cosavelat;

        double currx = x1;
        double curry = y1;

        for (unsigned ki = 0; ki < an.curvePointCount; ki++) {
            drawline(currx, curry, getStreetSegmentCurvePoint(segids[k], ki).lon * DEG_TO_RAD*cosavelat, getStreetSegmentCurvePoint(segids[k], ki).lat * DEG_TO_RAD);
            currx = getStreetSegmentCurvePoint(segids[k], ki).lon * DEG_TO_RAD*cosavelat;
            curry = getStreetSegmentCurvePoint(segids[k], ki).lat*DEG_TO_RAD;

            //                if (ratio >= 15) {
            //                    fillarc(currx, curry, get_visible_world().get_height() / 100, 0, 360); //need to convert linewidth to usable length
            //                }
        }

        drawline(currx, curry, x2, y2);
        /*if (getStreetSegmentInfo(segids[k]).curvePointCount<3) {
            LatLon point1 = getIntersectionPosition(preIntersectionID);
            LatLon point2 = getIntersectionPosition(curIntersectionID);
            float x = (point1.lon + point2. lon) / 2 * DEG_TO_RAD*cosavelat;
            float y = (point1.lat + point2.lat) / 2 * DEG_TO_RAD;
            float theta = atan((point1.lat - point2.lat) / ((point1.lon - point2.lon) * cosavelat));
            if(theta>0){
            settextrotation(theta / DEG_TO_RAD);
            }
            else{
                settextrotation(theta / DEG_TO_RAD-180);
            }
            drawtext(x, y, "<", 1000, 1000);
            settextrotation(0);
        }*/
        preIntersectionID = curIntersectionID;
    }
}

void draw_positions(LatLon clickposition) {
    setlinewidth(3);
    unsigned inter = find_closest_intersection(clickposition);
    unsigned poi = find_closest_point_of_interest(clickposition);
    float diff = get_visible_world().get_height() / 80;
    float x = getIntersectionPosition(inter).lon * DEG_TO_RAD*cosavelat;
    float y = getIntersectionPosition(inter).lat*DEG_TO_RAD;
    setcolor(MAGENTA);
    drawarc(x, y, diff, 0, 360);
    drawline(x - 2 * diff, y, x + 2 * diff, y);
    drawline(x, y + 2 * diff, x, y - 2 * diff);
}