/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
#include "m3.h"
#include "m2.h"
#include "intersectionInfo.h"
#include "OSMDatabaseAPI.h"
#include "m1.h"
#include <queue>
#include <iostream>
#include <set>
#include "m4.h"
#include <algorithm>
#include <vector>


using namespace std;

struct cmp {

    bool operator()(const intersectionInfo lfs, const intersectionInfo rhs) const {

        return lfs.score > rhs.score;
    }

};

struct cmp2 {

    bool operator()(const intersectionInfo lfs, const intersectionInfo rhs) const {

        return lfs.distfrmsource > rhs.distfrmsource;
    }

};

vector<unsigned> traveling_courier(const std::vector<DeliveryInfo>& deliveries, const std::vector<unsigned>& depots) {

    unsigned next;
    bool flag=0;


    vector<unsigned> todeliver;
    for (unsigned count = 0; count < deliveries.size(); count++) {
        todeliver.push_back(deliveries[count].pickUp);
    }

    vector<unsigned> totalpath;
    unsigned interstart;
    double initraveltime = INFINITY;
    vector <unsigned> bestpath;

    //    unsigned finalindex;
    //    for (unsigned u=0; u<depots.size(); u++){
    //        vector <unsigned> path = findnext(depots[u], todeliver, next);
    //        if (path.size()==0){
    //            continue;
    //        }
    //        if (compute_path_travel_time(path)<=initraveltime){
    //            initraveltime=compute_path_travel_time(path);
    //            finalindex=u;
    //        }
    //    }
    //    next = depots[finalindex];
    for (unsigned o = 0; o < depots.size(); o++) {
        next=depots[o];
        while (!todeliver.empty()) {
            interstart = next;

            vector <unsigned> path = findnext(interstart, todeliver, next);
            if (path.size()==0){
                flag=1;
                break;
            }
            totalpath.insert(totalpath.end(), path.begin(), path.end());


            //clear current intersection in "next", add drop off location if its pick up
            //if its drop off delete without adding anything new
            for (unsigned a = 0; a < deliveries.size(); a++) {

                if (deliveries[a].pickUp == next) {
                    for (unsigned b = 0; b < todeliver.size(); b++) {
                        if (todeliver[b] == next) {
                            todeliver.erase(todeliver.begin() + b);
                            todeliver.push_back(deliveries[a].dropOff);
                            break;
                        }
                    }
                } else if (deliveries[a].dropOff == next) {
                    for (unsigned b = 0; b < todeliver.size(); b++) {
                        if (todeliver[b] == next) {
                            todeliver.erase(todeliver.begin() + b);
                            break;
                        }

                    }
                }
            }



        }
        if (flag==1){
            flag=0;
            continue;
        }
        interstart = next;
        vector<unsigned> endpath = findnext(interstart, depots, next);
        if (endpath.size()==0){
            continue;
        }
        totalpath.insert(totalpath.end(), endpath.begin(), endpath.end());
        return totalpath;
    }
}

vector<unsigned> findnext(unsigned intersect_id_start, vector<unsigned> idstore, unsigned &next) {


    if (idstore.size() == 1) {
        next = idstore[0];
        return find_path_between_intersections(intersect_id_start, idstore[0]);
    }

    for (unsigned n = 0; n < idstore.size(); n++) {
        if (helper_find_distance(getIntersectionPosition(intersect_id_start), getIntersectionPosition(idstore[n])) <= 300) {
            next = idstore[n];
            return find_path_between_intersections(intersect_id_start, idstore[n]);
        }
    }

    priority_queue<intersectionInfo, vector<intersectionInfo>, cmp2> nodes;

    vector<intersectionInfo> exactidtointer;
    for (unsigned lul = 0; lul < getNumberOfIntersections(); lul++) {
        intersectionInfo temp;
        temp.distfrmsource = INFINITYY;
        temp.previd = UNKNOWN;
        temp.id = lul;
        temp.visited = false;
        exactidtointer.push_back(temp);
    }

    exactidtointer[intersect_id_start].distfrmsource = 0;

    nodes.push(exactidtointer[intersect_id_start]);
    while (nodes.size() != 0) {


        intersectionInfo curr = nodes.top();
        nodes.pop();
        if (curr.distfrmsource != exactidtointer[curr.id].distfrmsource) {
            continue;
        }
        if (curr.visited == true) {
            continue;
        }
        for (unsigned b = 0; b < idstore.size(); b++) {
            if (curr.id == idstore[b]) {
                //cout<<"currid: "<<curr.id<<endl<<"idstore[b]: "<<idstore[b]<<endl;
                vector <unsigned> cmpsegments;
                while (curr.previd != UNKNOWN) {
                    cmpsegments.push_back(curr.previd);
                    curr = exactidtointer[theothernodeid(curr.id, curr.previd)];
                }
                reverse(cmpsegments.begin(), cmpsegments.end());

                next = idstore[b];
                //cout<<next<<endl;
                return cmpsegments;
            }
        }
        for (unsigned k = 0; k < getIntersectionStreetSegmentCount(curr.id); k++) {
            unsigned idk = getIntersectionStreetSegment(curr.id, k);
            unsigned othernode = theothernodeid(curr.id, idk);
            StreetSegmentInfo temp = getStreetSegmentInfo(idk);
            if (!((temp.from == curr.id) || (temp.to == curr.id && temp.oneWay == false))) {
                continue;
            }


            if (exactidtointer[othernode].visited == true) {
                continue;
            }

            double newtime = exactidtointer[curr.id].distfrmsource + find_street_segment_travel_time(idk);



            if ((curr.previd != UNKNOWN) && (getStreetSegmentInfo(curr.previd).streetID != temp.streetID)) {
                newtime = newtime + 0.25;
            }



            if (newtime < exactidtointer[othernode].distfrmsource) {
                exactidtointer[othernode].distfrmsource = newtime;
                exactidtointer[othernode].previd = idk;
                nodes.push(exactidtointer[othernode]);
            }


        }
        exactidtointer[curr.id].visited = true;
    }
    vector<unsigned> temp;
    return temp;
}
